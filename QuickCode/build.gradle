// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.0.1"
        classpath "com.google.gms:google-services:3.0.0"
        classpath "org.ajoberstar:grgit:1.5.0"
        classpath "com.google.firebase:firebase-plugins:1.1.4"
    }
}

plugins {
    id "org.sonarqube" version "2.6"
}

allprojects {
    repositories {
        jcenter()
        google()
        maven { url "https://jitpack.io" }
    }
}

import org.ajoberstar.grgit.Grgit

ext {
    def git = Grgit.open(currentDir: projectDir)

    toolVersions = [
            versionCode      : git.tag.list().size(),
            versionName      : git.describe(),
            minSdkVersion    : 19,
            targetSdkVersion : 26,
            compileSdkVersion: 26,
            buildToolsVersion: "26.0.2"
    ]

    versions = [
            dexcount            : "0.6.4",

            googleSupport       : "27.0.2",
            multidex            : "1.0.2",
            installreferrer     : "1.0",

            googleServices      : "11.8.0",
            zxing               : "3.0.1",
            autoValue           : "1.5.1",

            autoValueParcel     : "0.2.5",
            autoValueFirebase   : "1.1.0",

            materialAboutLibrary: "2.2.3-support26.1.0",

            timber              : "4.6.0",

            leakcanary          : "1.5",

            junit               : "4.12",
            mockito             : "2.9.0"
    ]

    git.close()
}

task printVersion() {
    doLast {
        println("Version Code: $toolVersions.versionCode")
        println("Version Name: $toolVersions.versionName")
    }
}

task printStatsFromThisVersion() {
    doLast {
        def statsFromThisVersion = createStatsFromThisVersion()
        println("Apk stats: $statsFromThisVersion")
        statsFromThisVersion = statsFromThisVersion.replace(",", "\t")
        println("Version\t\t\tSize\tMethods\tFields")
        println("$statsFromThisVersion")
    }
}

task generateStatsFromThisVersion() {
    doLast {
        def statsFromThisVersion = createStatsFromThisVersion()

        def file = new File("$projectDir/../stats/apkStats.csv")
        file.createNewFile()
        file.text += statsFromThisVersion
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
private createStatsFromThisVersion() {
    def apkSize = "stat -f%z mobile/build/outputs/apk/release/mobile-release.apk".execute().text.trim()
    def methodCount = "sed -n 2p mobile/build/outputs/dexcount/release.csv".execute().text.trim()
    return "$toolVersions.versionName ($toolVersions.versionCode),$apkSize,$methodCount\n"
}

task generateLastCommitsText() {
    // Also useful in command line:
    // git log --pretty=format:"%ar - %B"
    doLast {
        def maxCommits = 50
        def filename = "$projectDir/../fastlane/metadata/android/en-US/changelogs/$versionCode" + ".txt"
        def git = Grgit.open(currentDir: projectDir)
        def commits = ""

        println("Last $maxCommits commits for version $versionCode:")
        for (commit in git.log(maxCommits: maxCommits)) {
            def line = " â€¢ $commit.fullMessage"
            print(line)
            commits += line
        }
        new File(filename).text = "$commits"
        git.close()
    }
}

sonarqube {
    properties {
        property "sonar.projectName", project.name
        property "sonar.projectKey", project.name
        property "sonar.projectVersion", rootProject.versionName

        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "https://sonarcloud.io"

        property "sonar.android.lint.report", "mobile/build/outputs/lint-results-debug.xml"
        property "sonar.import_unknown_files", true
        property "sonar.exclusions", "**/*.png,**/*.jpg,**/*.pdf,**/*.ttf,**/*.otf,"
    }
}
